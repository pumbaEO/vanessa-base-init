Перем СчетчикОбъектов;

Функция ПолучитьСтрокуДляСтруктуры(Структура,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь)
	
	СчетчикОбъектов = СчетчикОбъектов + 1;
	ИмяПеременной   =  "	"+"Структура" + СчетчикОбъектов;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый Структура;");
	
	Для каждого Элем Из Структура Цикл
		Ключ     = Элем.Ключ;
		Значение = Элем.Значение;
		Если Значение = Неопределено Тогда
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Вставить(""" + Ключ + """,Неопределено);");
			Продолжить;
		КонецЕсли;	 
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
	КонецЦикла;
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода, "	"+"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;	 
	
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляСоответствия(Соответствие,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	СчетчикОбъектов = СчетчикОбъектов + 1;
	ИмяПеременной   =  "	"+"Соответствие" + СчетчикОбъектов;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый Соответствие;");
	
	Для каждого Элем Из Соответствие Цикл
		Ключ     = Элем.Ключ;
		Значение = Элем.Значение;
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		СтрокаКлюч     = ПолучитьСтрокуДляЗначения(Ключ,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """," + СтрокаЗначения + ");");
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Вставить(" + СтрокаКлюч + "," + СтрокаЗначения + ");");
	КонецЦикла;
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода, "	"+"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;	 
	
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляСпискаЗначений(Спс,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь)
	
	//Сообщить(" ");
	//Сообщить("ОбъектДляХранилищаЗначения = Новый Структура;");
	СчетчикОбъектов = СчетчикОбъектов + 1;
	ИмяПеременной   =  "	"+"СписокЗначений" + СчетчикОбъектов;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый СписокЗначений;");
	
	//Спс = Новый СписокЗначений;
	//Спс.Добавить(Справочники.Номенклатура.НайтиПоКоду("00000001728"),"Товар");
	Для каждого Элем Из Спс Цикл
		Значение      = Элем.Значение;
		Представление = Элем.Представление;
		Если Значение = Неопределено Тогда
			//Сообщить("ОбъектДляХранилищаЗначения.Вставить(""" + Ключ + """,Неопределено);");
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Добавить(Неопределено,""" + Представление + """);");
			Продолжить;
		КонецЕсли;	 
		
		СтрокаЗначения = ПолучитьСтрокуДляЗначения(Значение,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаЗначения = Неопределено Тогда
			СтрокаЗначения = "Неопределено";
		КонецЕсли;	 
		Если ЗначениеЗаполнено(Представление) Тогда
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Добавить(" + СтрокаЗначения + ",""" + Представление + """);");
		Иначе	
			ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Добавить(" + СтрокаЗначения + ");");
		КонецЕсли;	 
	КонецЦикла;
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода, "	"+"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;	 
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьСтрокуДляТаблицыЗначений(Тзн,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода,ВернутьИмяПеременной = Ложь)
	
	СчетчикОбъектов  = СчетчикОбъектов + 1;
	ЗначениеСчетчика = СчетчикОбъектов; 
	ИмяПеременной    =  "	"+"ТаблицаЗначений" + СчетчикОбъектов;
	
	ДобавитьСтрокуКода(ТаблицаКода," ");
	ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + " = Новый ТаблицаЗначений;");
	
	Для каждого Колонка Из Тзн.Колонки Цикл
		ДобавитьСтрокуКода(ТаблицаКода,ИмяПеременной + ".Колонки.Добавить(""" + Колонка.Имя + """);");
	КонецЦикла;
	
	Ном = 0;
	Для каждого СтрокаТаблицы Из Тзн Цикл
		Ном = Ном + 1;
		ДобавитьСтрокуКода(ТаблицаКода, "	"+"//Строка №" + Ном);
		ИдСтрокиТаблицы =  "	"+"СтрокаТаблицы_" + ЗначениеСчетчика;
		ДобавитьСтрокуКода(ТаблицаКода,ИдСтрокиТаблицы + " = " + ИмяПеременной + ".Добавить();");
		Для каждого Колонка Из Тзн.Колонки Цикл
			ЗначениеИзТаблицы = СтрокаТаблицы[Колонка.Имя];
			Если ЗначениеИзТаблицы = Неопределено Тогда
				ДобавитьСтрокуКода(ТаблицаКода,ИдСтрокиТаблицы + "." + Колонка.Имя + "=" + "Неопределено" + ";");
				Продолжить;
			КонецЕсли;	 
			
			
			СтрокаЗначения = ПолучитьСтрокуДляЗначения(ЗначениеИзТаблицы,"",ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
			Если СтрокаЗначения = Неопределено Тогда
				СтрокаЗначения = "Неопределено";
			КонецЕсли;	 
			ДобавитьСтрокуКода(ТаблицаКода,ИдСтрокиТаблицы + "." + Колонка.Имя + "=" + СтрокаЗначения + ";");
		КонецЦикла;
	КонецЦикла;
	
	Если ВернутьИмяПеременной Тогда
		Возврат ИмяПеременной;
	Иначе	
		ДобавитьСтрокуКода(ТаблицаКода, "	"+"ХранилищеЗначения = Новый ХранилищеЗначения(" + ИмяПеременной + ");");
	КонецЕсли;
	
	Возврат "//Была создана структура";
КонецФункции	

Функция ПолучитьДатуСтрокой(Дат)
	Возврат "'" + Формат(Дат,"ДФ=yyyyMMdd") + Формат(Дат,"ДФ=HHmmss") + "'";
КонецФункции	

Процедура ДобавитьОбъектВТаблицу(ТаблицаОбъектов,Объект,Тип,Вид)
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;	 
	
	СтрТаблицаОбъектов        = ТаблицаОбъектов.Добавить();
	СтрТаблицаОбъектов.Объект = Объект;
	СтрТаблицаОбъектов.Тип    = Тип;
	СтрТаблицаОбъектов.Вид    = Вид;
КонецПроцедуры

Функция ПолучитьСтрокуДляЗначения(Значение,ИмяКонстанты = "",ТаблицаСправочников,ТаблицаКода);
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("Строка") Тогда
		
		ПромСтр           = СтрЗаменить(Значение,"""","""""");
		ЧислоСтрокВСтроке = СтрЧислоСтрок(ПромСтр);
		Если ЧислоСтрокВСтроке = 1 Тогда
			Возврат """" + ПромСтр + """";
		Иначе
			СтрокаРезультат = """" + СтрПолучитьСтроку(ПромСтр,1);
			Для Ккк = 2 По ЧислоСтрокВСтроке Цикл
				СтрокаРезультат = СтрокаРезультат + Символы.ПС;
				СтрокаРезультат = СтрокаРезультат + Символы.Таб +  "|" +  СтрПолучитьСтроку(ПромСтр,Ккк);
				Если Ккк = ЧислоСтрокВСтроке Тогда
					СтрокаРезультат = СтрокаРезультат + """";
				КонецЕсли;	 
			КонецЦикла;
			
			Возврат СтрокаРезультат;
		КонецЕсли;	
		
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат СтрЗаменить(СтрЗаменить(Значение,",","."),Символы.НПП,"");
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда
		Если Значение Тогда
			Возврат "Истина";
		Иначе	
			Возврат "Ложь";
		КонецЕсли;	 
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Возврат ПолучитьДатуСтрокой(Значение);
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		ДлинаКода         = Значение.Метаданные().ДлинаКода;
		ДлинаНаименования = Значение.Метаданные().ДлинаНаименования;
		
		ДобавитьОбъектВТаблицу(ТаблицаСправочников,Значение,"Справочник",ИмяМетаданного);
		
		Если ДлинаКода > 0 Тогда
			Если Значение.Метаданные().ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
				Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код""," + СтрЗаменить(СокрЛП(Значение.Код),Символы.НПП,"") + ")";
			Иначе	
				Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Код"",""" + СокрЛП(Значение.Код) + """)";
			КонецЕсли;	 
		ИначеЕсли ДлинаНаименования > 0 Тогда
			Возврат "ПолучитьСправочникПоРеквизиту(""" + ИмяМетаданного + """,""Наименование"",""" + СокрЛП(Значение.Наименование) + """)";
		Иначе
			Возврат Неопределено;
		КонецЕсли;	 
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		ТипНомера         = Значение.Метаданные().ТипНомера;
		ДлинаНомера       = Значение.Метаданные().ДлинаНомера;
		Если ДлинаНомера > 0 Тогда
			Если Значение.Метаданные().ТипНомера = Метаданные.СвойстваОбъектов.ТипНомераДокумента.Число Тогда
				Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """," + СтрЗаменить(СокрЛП(Значение.Номер),Символы.НПП,"") + "," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
			Иначе	
				Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """,""" + СокрЛП(Значение.Номер) + """," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
			КонецЕсли;	 
		Иначе	
			Возврат "ПолучитьДокументПоНомеру(""" + ИмяМетаданного + """,""" + "" + """," + ПолучитьДатуСтрокой(Значение.Дата) + ")";
		КонецЕсли;	 
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		ИмяМетаданного    = Значение.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяМетаданного].Индекс(Значение);
		ИмяЗначенияПеречисления = Метаданные.Перечисления[ИмяМетаданного].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
		
		Возврат "Перечисления." + ИмяМетаданного + "." + ИмяЗначенияПеречисления;
	ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
		ЗначениеИзХранилища = Значение.Получить();
		Если ЗначениеИзХранилища = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		ТипЗначенияИзХранилища = ТипЗнч(ЗначениеИзХранилища);
		Если ТипЗначенияИзХранилища = Тип("Структура") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСтруктуры(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода);
		ИначеЕсли ТипЗначенияИзХранилища = Тип("СписокЗначений") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСпискаЗначений(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода);
		ИначеЕсли ТипЗначенияИзХранилища = Тип("ТаблицаЗначений") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляТаблицыЗначений(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода);
		ИначеЕсли ТипЗначенияИзХранилища = Тип("Соответствие") Тогда
			Если ЗначениеИзХранилища.Количество() = 0 Тогда
				Возврат Неопределено;
			КонецЕсли;	 
			Возврат ПолучитьСтрокуДляСоответствия(ЗначениеИзХранилища,ТаблицаСправочников,ТаблицаКода);
		КонецЕсли;	 
		
		Если ИмяКонстанты <> "" Тогда
			ДобавитьСтрокуКода(ТаблицаКода,"	"+"//Здесь надо заполнить константу " + ИмяКонстанты + " в которой хранилище значения. ТипЗначенияИзХранилища="+ТипЗначенияИзХранилища);
		КонецЕсли;	 
		Возврат Неопределено;
	
	ИначеЕсли ТипЗначения = Тип("Структура") Тогда
		Возврат ПолучитьСтрокуДляСтруктуры(Значение,ТаблицаСправочников,ТаблицаКода,Истина);
	ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда
		Возврат ПолучитьСтрокуДляСпискаЗначений(Значение,ТаблицаСправочников,ТаблицаКода,Истина);
	ИначеЕсли ТипЗначения = Тип("Соответствие") Тогда
		Возврат ПолучитьСтрокуДляСоответствия(Значение,ТаблицаСправочников,ТаблицаКода,Истина);
	ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений") Тогда
		Возврат ПолучитьСтрокуДляТаблицыЗначений(Значение,ТаблицаСправочников,ТаблицаКода,Истина);
	Иначе
		Если ИмяКонстанты = "" Тогда //значит это подчиненное значение, которое имеет сложный тип, например в таблце значений внутри были структуры
			
		КонецЕсли;	 
		Возврат Неопределено;
	КонецЕсли;	 
КонецФункции	

Процедура ПолучитьСтрокуКодаДляЗначения(Значение,Имя, ТаблицаСправочниковДляПолученияМакетовFixtures, ТаблицаКода)
	
		ТипЗначения = ТипЗнч(Значение);
		
		СтрокаДляЗначения = ПолучитьСтрокуДляЗначения(Значение,Имя,ТаблицаСправочниковДляПолученияМакетовFixtures,ТаблицаКода);
		Если СтрокаДляЗначения = Неопределено Тогда
			ДобавитьСтрокуКода(ТаблицаКода,"	"+"//Здесь надо установить значение для константы """ + Имя + """. ТипЗначения="+ТипЗначения);
		ИначеЕсли ТипЗначения = Тип("ХранилищеЗначения") Тогда
			ДобавитьСтрокуКода(ТаблицаКода,"	"+"Константы." + Имя + ".Установить(" + "ХранилищеЗначения" + ");");
		ИначеЕсли СтрокаДляЗначения = "ОбработкаВнутриАлгоритма" тогда
			//значит уже всё сделано
		Иначе
			ДобавитьСтрокуКода(ТаблицаКода,"	"+"Константы." + Имя + ".Установить(" + СтрокаДляЗначения + ");");
		КонецЕсли;	 
		
КонецПроцедуры

Процедура ДобавитьСтрокуКода(Текст, ТекстДобавить)
	
	Текст = Текст + Символы.ПС + ТекстДобавить;
	
КонецПроцедуры

Функция ПолучитьТаблицуСправочников() 
	Перем ТаблицаСправочниковДляПолученияМакетовFixtures;
	
	ТаблицаСправочниковДляПолученияМакетовFixtures = Новый ТаблицаЗначений;
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Объект");
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Тип");
	ТаблицаСправочниковДляПолученияМакетовFixtures.Колонки.Добавить("Вид");
	
	Возврат ТаблицаСправочниковДляПолученияМакетовFixtures;
	
КонецФункции

Функция СгенерироватьУстановкуКонстатнтxUnit(Знач ПутьКОбработкеГенерации, Знач МассивИсключений = Неопределено)  Экспорт
	Перем РезультатПроцедуры, ТестовыеМетоды  ;
	РезультатПроцедуры = "";
	ТестовыеМетоды = "";
	
	МассивМакетовДляВставки = Новый Массив;
	Если МассивИсключений = Неопределено Тогда 
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	
	ГенераторFixtures = ВнешниеОбработки.Создать(ПутьКОбработкеГенерации, Ложь);
	ГенераторFixtures.ВыгружатьКод = Истина;
	ГенераторFixtures.ОбменДанными = Истина;
	ГенераторFixtures.ВыгружатьВJSON = Истина;
	
	
	ТаблицаКонстант = ПолучитьТаблицуКонстант(МассивИсключений);
	СоответсвиеКонстантДляЗаполнения = Новый Соответствие;
	
	Для каждого Строка из ТаблицаКонстант Цикл
		
		ДобавитьСтрокуКода(РезультатПроцедуры, "#Область "+СтрЗаменить(Строка.Подсистема, ".", "_"));
		ДобавитьСтрокуКода(ТестовыеМетоды, "	"+"#Область "+СтрЗаменить(Строка.Подсистема, ".", "_")+"ТестовыйМетод");
		ДобавитьСтрокуКода(РезультатПроцедуры, "");
		Для каждого Константа из Строка.Значение Цикл
			
			Если СоответсвиеКонстантДляЗаполнения.Получить(Константа) = Неопределено Тогда 
				СоответсвиеКонстантДляЗаполнения.Вставить(Константа, Истина);
			Иначе
				ДобавитьСтрокуКода(РезультатПроцедуры,"//Константа " + Константа + ".");
				Продолжить;
			КонецЕсли;
			
			ТаблицаСправочников = ПолучитьТаблицуСправочников();
			
	        ИмяМакета = "МакетДанныхДля_"+Константа;
			ИмяПроцедуры = "УстановитьКонстанту"+Константа + "";
			
			ТекстТеста = СтрЗаменить("ПараметрыТеста = Новый Структура(""ПредставлениеТеста,ИмяТеста,Транзакция,Параметр"", ""%1%"", ""%2%"", Ложь, ""%3%"");",
							"%1%", СтрЗаменить(Строка.Подсистема, ".", "_")+"-"+Константа);
			ТекстТеста = СтрЗаменить(ТекстТеста, "%2%", ИмяПроцедуры);
			
			ДобавитьСтрокуКода(РезультатПроцедуры, "");
			ДобавитьСтрокуКода(РезультатПроцедуры, "Процедура "+ИмяПроцедуры + "(Параметр = Неопределено) Экспорт");
			
			Значение = Константы[Константа].Получить();
			
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				ДобавитьСтрокуКода(РезультатПроцедуры, "	"+"//Константа " + Константа + " была не заполнена.");
				ДобавитьСтрокуКода(РезультатПроцедуры, "	"+"Константы."+Константа+".Установить(Неопределено);");
				ДобавитьСтрокуКода(РезультатПроцедуры, "КонецПроцедуры //"+ИмяПроцедуры);
				Продолжить;
			КонецЕсли;
			
			ТипЗначения = ТипЗнч(Значение);
			Если ТипЗначения = Тип("ХранилищеЗначения") Тогда
				ЗначениеИзХранилища = Значение.Получить();
				Если ЗначениеИзХранилища = Неопределено Тогда
					ДобавитьСтрокуКода(РезультатПроцедуры, "	"+"//Константа " + Константа + " была не заполнена.");
					ДобавитьСтрокуКода(РезультатПроцедуры,  "	"+"Константы."+Константа+".Установить(Новый ХранилищеЗначения(Неопределено))");
					ДобавитьСтрокуКода(РезультатПроцедуры, "КонецПроцедуры //"+ИмяПроцедуры);
					Продолжить;
				КонецЕсли;	
			КонецЕсли;
			
			СчетчикОбъектов = 0;
			ТекстДляВставки = "";			
			ПолучитьСтрокуКодаДляЗначения(Значение, Константа, ТаблицаСправочников, ТекстДляВставки);
			Если ТаблицаСправочников.Количество() > 0 Тогда 
				
				ТекстТеста = СтрЗаменить(ТекстТеста, "%3%", ИмяМакета);
				
				ДобавитьСтрокуКода(РезультатПроцедуры, "");
				ДобавитьСтрокуКода(РезультатПроцедуры, "	"+"юТест.СоздатьДанныеПоМакетам(ЭтотОбъект, Параметр);");
			Иначе 
				СтроковоеПердставлениеЗначения = "";
				Попытка
				
					СтроковоеПердставлениеЗначения = Строка(Значение);
					СтроковоеПердставлениеЗначения = СтрЗаменить(СтроковоеПердставлениеЗначения,"""","""""");
					СтроковоеПердставлениеЗначения = СокрЛП(Лев(СтроковоеПердставлениеЗначения, 100));
				Исключение
				
				КонецПопытки;
				ТекстТеста = СтрЗаменить(ТекстТеста, "%3%", СтроковоеПердставлениеЗначения);
			КонецЕсли;
			
			
			ДобавитьСтрокуКода(ТестовыеМетоды, "	"+ТекстТеста);
			ДобавитьСтрокуКода(ТестовыеМетоды, "	"+"ВсеТесты.Добавить(ПараметрыТеста);");
			
			
			ДобавитьСтрокуКода(РезультатПроцедуры, ТекстДляВставки);
			ДобавитьСтрокуКода(РезультатПроцедуры, "КонецПроцедуры //"+ИмяПроцедуры);
			
			ТаблицаДанных = ТаблицаСправочников.Скопировать();
			ТаблицаДанных.Свернуть("Объект");
			Для каждого строкаданных из ТаблицаДанных Цикл 
				НоваяСтрока = ГенераторFixtures.ТаблицаДанных.Добавить();
				НоваяСтрока.Ссылка = строкаданных.Объект;
			КонецЦикла;
			
			Если ТаблицаДанных.Количество() > 0 Тогда 
				Макет = Новый ТекстовыйДокумент;
				МассивСсылок = ТаблицаДанных.ВыгрузитьКолонку("Объект");
				Текст = ГенераторFixtures.ОбъектыВJSON(МассивСсылок);
				
				Макет.УстановитьТекст(Текст);
				Макет.ВставитьСтроку(0,"/* "+ИмяМакета+"*/");
				
				ГенераторFixtures.ТаблицаДанных.Очистить();
				МассивМакетовДляВставки.Добавить(Новый Структура("Макет, ИмяМакета", Макет, ИмяМакета));
			КонецЕсли;
			 	
		КонецЦикла;
		
		ДобавитьСтрокуКода(РезультатПроцедуры, "#КонецОбласти");
		ДобавитьСтрокуКода(РезультатПроцедуры, "//КонецОбласти "+СтрЗаменить(Строка.Подсистема, ".", "_"));
		ДобавитьСтрокуКода(РезультатПроцедуры, "");

		ДобавитьСтрокуКода(ТестовыеМетоды, "	"+"#КонецОбласти");
		ДобавитьСтрокуКода(ТестовыеМетоды, "");
					
	КонецЦикла;
	
	ТекстШаблона = ПолучитьМакет("ШаблонТекстаМодуляxUnit");
	Текст = ТекстШаблона.ПолучитьТекст();
	Текст = СтрЗаменить(Текст, "%1%", ТестовыеМетоды);
	Текст = СтрЗаменить(Текст, "%2%", РезультатПроцедуры);
			
	СтруктураРезультатов = Новый Структура("Процедура, СписокТестов, МассивМакетов", Текст, ТестовыеМетоды, МассивМакетовДляВставки);
	
	Возврат СтруктураРезультатов;
	
КонецФункции //СгенерироватьУстановкуКонстатнт

Процедура ПрочитатьПодсистемыРекурсивно(Подсистема, СоотвествиеМетаданныхИПодсистем, Родитель = "") 
	
	ИмяПодсистемы = ?(ПустаяСтрока(Родитель), "", Родитель+".") + Подсистема.Имя;
	Если Подсистема.Подсистемы.Количество() > 0 Тогда 
		Для каждого подпосистема из Подсистема.Подсистемы Цикл 
			ПрочитатьПодсистемыРекурсивно(подпосистема, СоотвествиеМетаданныхИПодсистем, ИмяПодсистемы);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции из Подсистема.Состав Цикл 
		Если СоотвествиеМетаданныхИПодсистем.Получить(ЭлементКоллекции) = Неопределено Тогда 
			СоотвествиеМетаданныхИПодсистем.Вставить(ЭлементКоллекции, Новый Массив());
		КонецЕсли;
		
		Массив = СоотвествиеМетаданныхИПодсистем.Получить(ЭлементКоллекции);
		Массив.Добавить(ИмяПодсистемы);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуКонстант(МассивИсключений) Экспорт 
	
	СоотвествиеМетаданныхИПодсистем = Новый Соответствие;
	Для каждого Подсистема из Метаданные.Подсистемы Цикл 
		ПрочитатьПодсистемыРекурсивно(Подсистема, СоотвествиеМетаданныхИПодсистем, "");
	КонецЦикла;
	
	СортировкаПоПодсистемам = Новый Соответствие;
	
	КС = Новый КвалификаторыСтроки(100);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	ТаблицаПодсистем = Новый ТаблицаЗначений;
	ТаблицаПодсистем.Колонки.Добавить("Подсистема", ОписаниеТиповС);
	ТаблицаПодсистем.Колонки.Добавить("Значение");
	
	НоваяСтрока = ТаблицаПодсистем.Добавить();
	НоваяСтрока.Значение = Новый Массив;
	НоваяСтрока.Подсистема = "ъБезПодсистемы";
	
	СортировкаПоПодсистемам.Вставить("БезПодсистемы", НоваяСтрока);
	
	Для каждого константа Из Метаданные.Константы Цикл
		
		Если МассивИсключений.Найти(константа.Имя) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Результат = СоотвествиеМетаданныхИПодсистем.Получить(константа);
		Если Результат = Неопределено Тогда
			Результат = СортировкаПоПодсистемам.Получить("Без подсистемы");
			Результат.Значение.Добавить(Константа.Имя);
		Иначе
			Для каждого Элемент из Результат Цикл
				Если СортировкаПоПодсистемам.Получить(Элемент) = Неопределено Тогда 
					НоваяСтрока = ТаблицаПодсистем.Добавить();
					НоваяСтрока.Значение = Новый Массив;
					НоваяСтрока.Подсистема = Элемент;
					СортировкаПоПодсистемам.Вставить(Элемент, НоваяСтрока);
				КонецЕсли;
				Строка = СортировкаПоПодсистемам.Получить(Элемент);
				Строка.Значение.Добавить(константа.Имя);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла; 
	
	ТаблицаПодсистем.Сортировать("Подсистема");
	
	Возврат ТаблицаПодсистем;
	
КонецФункции

Функция Версия() Экспорт 
	Возврат ПолучитьВерсиюОбработки();
КонецФункции

Функция ПолучитьВерсиюОбработки() Экспорт 
	Возврат "1.1.2";
КонецФункции

СчетчикОбъектов = 0;
	